!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/media/backup/src/git/calendar/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
BUGS	calendar.1	/^.Sh BUGS$/;"	s
DESCRIPTION	calendar.1	/^.Sh DESCRIPTION$/;"	s
EASTER	calendar.h	/^#define EASTER /;"	d
EASTERNAMELEN	calendar.h	/^#define EASTERNAMELEN /;"	d
FILES	calendar.1	/^.Sh FILES$/;"	s
F_ISDAY	calendar.h	/^#define	F_ISDAY	/;"	d
F_ISMONTH	calendar.h	/^#define	F_ISMONTH	/;"	d
F_SPECIAL	calendar.h	/^#define	F_SPECIAL	/;"	d
GREGORIAN	calendar.h	/^extern enum calendars { GREGORIAN = 0, JULIAN, LUNAR } calendar;$/;"	e	enum:calendars
HISTORY	calendar.1	/^.Sh HISTORY$/;"	s
INTER	Makefile	/^INTER=	de_DE.UTF-8 hr_HR.UTF-8 ru_RU.UTF-8 fr_FR.UTF-8$/;"	m
JULIAN	calendar.h	/^extern enum calendars { GREGORIAN = 0, JULIAN, LUNAR } calendar;$/;"	e	enum:calendars
K	pesach.c	/^#define	K	/;"	d	file:
L	pesach.c	/^#define	L	/;"	d	file:
LUNAR	calendar.h	/^extern enum calendars { GREGORIAN = 0, JULIAN, LUNAR } calendar;$/;"	e	enum:calendars
MONTHLY	day.c	/^#define MONTHLY /;"	d	file:
Mktime	day.c	/^Mktime(char *date)$/;"	f	typeref:typename:time_t
NAME	calendar.1	/^.Sh NAME$/;"	s
NUMEV	calendar.h	/^#define NUMEV /;"	d
PASKHA	calendar.h	/^#define PASKHA /;"	d
PASKHALEN	calendar.h	/^#define PASKHALEN /;"	d
PESACH	calendar.h	/^#define PESACH /;"	d
PESACHLEN	calendar.h	/^#define PESACHLEN /;"	d
PRINT_DATE_BASE_LEN	calendar.h	/^#define PRINT_DATE_BASE_LEN /;"	d
PROG	Makefile	/^PROG=	calendar$/;"	m
SECSPERDAY	calendar.h	/^#define	SECSPERDAY	/;"	d
SEE	calendar.1	/^.Sh SEE ALSO$/;"	s
SRCS	Makefile	/^SRCS=   calendar.c io.c day.c pesach.c ostern.c paskha.c$/;"	m
STANDARDS	calendar.1	/^.Sh STANDARDS$/;"	s
SYNOPSIS	calendar.1	/^.Sh SYNOPSIS$/;"	s
T	pesach.c	/^#define	T	/;"	d	file:
USERTIMEOUT	calendar.h	/^#define USERTIMEOUT /;"	d
WEEKLY	day.c	/^#define WEEKLY /;"	d	file:
YEARLY	day.c	/^#define YEARLY /;"	d	file:
_PATH_CPP	pathnames.h	/^#define	_PATH_CPP	/;"	d
_PATH_INCLUDE	pathnames.h	/^#define	_PATH_INCLUDE	/;"	d
adjust_calendar	day.c	/^adjust_calendar(int *day, int *month)$/;"	f	typeref:typename:void	file:
beforeinstall	Makefile	/^beforeinstall:$/;"	t
bodun	calendar.h	/^	int	bodun;$/;"	m	struct:match	typeref:typename:int
bodun_always	calendar.c	/^int bodun_always = 0;$/;"	v	typeref:typename:int
cal	io.c	/^cal(void)$/;"	f	typeref:typename:void
calendar	day.c	/^enum calendars calendar;$/;"	v	typeref:enum:calendars
calendarFile	calendar.c	/^char *calendarFile = "calendar";  \/* default calendar file *\/$/;"	v	typeref:typename:char *
calendarHome	calendar.c	/^char *calendarHome = ".calendar"; \/* HOME *\/$/;"	v	typeref:typename:char *
calendarNoMail	calendar.c	/^char *calendarNoMail = "nomail";  \/* don't sent mail if this file exists *\/$/;"	v	typeref:typename:char *
calendars	calendar.h	/^extern enum calendars { GREGORIAN = 0, JULIAN, LUNAR } calendar;$/;"	g
childsig	calendar.c	/^childsig(int signo)$/;"	f	typeref:typename:void
closecal	io.c	/^closecal(FILE *fp)$/;"	f	typeref:typename:void
cumdays	day.c	/^int *cumdays, offset;$/;"	v	typeref:typename:int *
dayname	day.c	/^char dayname[10];$/;"	v	typeref:typename:char[10]
daynames	calendar.c	/^int daynames = 0;$/;"	v	typeref:typename:int
days	day.c	/^static char *days[] = {$/;"	v	typeref:typename:char * []	file:
daytab	day.c	/^int daytab[][14] = {$/;"	v	typeref:typename:int[][14]
desc	calendar.h	/^	char	**desc;$/;"	m	struct:event	typeref:typename:char **
doall	calendar.c	/^int doall = 0;$/;"	v	typeref:typename:int
easter	ostern.c	/^easter(int year)	\/* 0 ... abcd, NOT since 1900 *\/$/;"	f	typeref:typename:int
event	calendar.h	/^struct event {$/;"	s
f_Setday	calendar.c	/^int f_Setday = 0;	\/* calendar invoked with -A or -B *\/$/;"	v	typeref:typename:int
f_dayAfter	calendar.c	/^int f_dayAfter = 0;	\/* days after current date *\/$/;"	v	typeref:typename:int
f_dayBefore	calendar.c	/^int f_dayBefore = 0;	\/* days before current date *\/$/;"	v	typeref:typename:int
f_time	calendar.c	/^time_t f_time = 0;$/;"	v	typeref:typename:time_t
fill_print_date	day.c	/^fill_print_date(struct match *m, struct tm *tm)$/;"	f	typeref:typename:void
fixs	calendar.h	/^struct fixs {$/;"	s
fndays	day.c	/^static struct fixs fndays[8];         \/* full national days names *\/$/;"	v	typeref:struct:fixs[8]	file:
fnmonths	day.c	/^static struct fixs fnmonths[13];      \/* full national months names *\/$/;"	v	typeref:struct:fixs[13]	file:
foy	day.c	/^foy(int year)$/;"	f	typeref:typename:int
getday	day.c	/^getday(char *s)$/;"	f	typeref:typename:int
getdayvar	day.c	/^getdayvar(char *s)$/;"	f	typeref:typename:int
getev	calendar.h	/^	int (*getev)(int);$/;"	m	struct:specialev	typeref:typename:int (*)(int)
getfield	io.c	/^getfield(char *p, char **endp, int *flags)$/;"	f	typeref:typename:int
getmonth	day.c	/^getmonth(char *s)$/;"	f	typeref:typename:int
header	io.c	/^struct iovec header[] = {$/;"	v	typeref:struct:iovec[]
insert	io.c	/^insert(struct event **head, struct event *cur_evt)$/;"	f	typeref:typename:void
isleap	calendar.h	/^#define	isleap(/;"	d
isnow	day.c	/^isnow(char *endp, int bodun)$/;"	f	typeref:struct:match *
julian	day.c	/^u_long julian;$/;"	v	typeref:typename:u_long
ldesc	calendar.h	/^	char	*ldesc;$/;"	m	struct:event	typeref:typename:char *
len	calendar.h	/^	int len;$/;"	m	struct:fixs	typeref:typename:int
main	calendar.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
match	calendar.h	/^struct match {$/;"	s
months	day.c	/^static char *months[] = {$/;"	v	typeref:typename:char * []	file:
name	calendar.h	/^	char *name;$/;"	m	struct:fixs	typeref:typename:char *
name	calendar.h	/^	char *name;$/;"	m	struct:specialev	typeref:typename:char *
ndays	day.c	/^static struct fixs ndays[8];          \/* short national days names *\/$/;"	v	typeref:struct:fixs[8]	file:
next	calendar.h	/^	struct event	*next;$/;"	m	struct:event	typeref:struct:event *
next	calendar.h	/^	struct match	*next;$/;"	m	struct:match	typeref:struct:match *
nlen	calendar.h	/^	int nlen;$/;"	m	struct:specialev	typeref:typename:int
nmonths	day.c	/^static struct fixs nmonths[13];       \/* short national month names *\/$/;"	v	typeref:struct:fixs[13]	file:
offset	day.c	/^int *cumdays, offset;$/;"	v	typeref:typename:int
opencal	io.c	/^opencal(void)$/;"	f	typeref:typename:FILE *
paskha	paskha.c	/^paskha(int R)  \/*year*\/$/;"	f	typeref:typename:int
pesach	pesach.c	/^pesach(int R)$/;"	f	typeref:typename:int
pledge	calendar.c	/^int pledge(char *a, char *b)$/;"	f	typeref:typename:int
print_date	calendar.h	/^	char	print_date[PRINT_DATE_BASE_LEN+1];$/;"	m	struct:event	typeref:typename:char[]
print_date	calendar.h	/^	char	print_date[PRINT_DATE_BASE_LEN];$/;"	m	struct:match	typeref:typename:char[]
pw	calendar.c	/^struct passwd *pw;$/;"	v	typeref:struct:passwd *
setnnames	day.c	/^setnnames(void)$/;"	f	typeref:typename:void
settime	day.c	/^settime(time_t *now)$/;"	f	typeref:typename:void
specialev	calendar.h	/^struct specialev {$/;"	s
spev	calendar.c	/^struct specialev spev[NUMEV];$/;"	v	typeref:struct:specialev[]
tp	day.c	/^struct tm *tp;$/;"	v	typeref:struct:tm *
ulen	calendar.h	/^	int ulen;$/;"	m	struct:specialev	typeref:typename:int
uname	calendar.h	/^	char *uname;$/;"	m	struct:specialev	typeref:typename:char *
usage	calendar.c	/^usage(void)$/;"	f	typeref:typename:void
var	calendar.h	/^	int	var;$/;"	m	struct:match	typeref:typename:int
variable_weekday	day.c	/^variable_weekday(int *day, int month, int year)$/;"	f	typeref:typename:void
when	calendar.h	/^	time_t	when;$/;"	m	struct:event	typeref:typename:time_t
when	calendar.h	/^	time_t	when;$/;"	m	struct:match	typeref:typename:time_t
